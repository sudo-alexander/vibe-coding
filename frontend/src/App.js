import React, { useState, useEffect } from "react";
import { BrowserRouter, Routes, Route, Link, useLocation } from "react-router-dom";
import axios from "axios";
import "./App.css";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

// Map Component using OpenStreetMap
const InteractiveMap = ({ places, selectedPlace, onPlaceSelect }) => {
  useEffect(() => {
    if (typeof window !== 'undefined' && window.L) {
      // Initialize map
      const map = window.L.map('map').setView([56.3287, 44.0020], 12);
      
      // Add OpenStreetMap tiles
      window.L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
      }).addTo(map);

      // Add markers for places
      places.forEach(place => {
        const marker = window.L.marker([place.latitude, place.longitude])
          .addTo(map)
          .bindPopup(`<b>${place.name}</b><br>${place.description}`)
          .on('click', () => onPlaceSelect(place));
        
        if (selectedPlace && selectedPlace.id === place.id) {
          marker.openPopup();
        }
      });

      return () => {
        map.remove();
      };
    }
  }, [places, selectedPlace, onPlaceSelect]);

  return <div id="map" className="w-full h-96 rounded-lg shadow-lg"></div>;
};

// Navigation Component
const Navigation = () => {
  const location = useLocation();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  
  const navItems = [
    { path: "/", label: "–ì–ª–∞–≤–Ω–∞—è", icon: "üè†" },
    { path: "/history", label: "–ò—Å—Ç–æ—Ä–∏—è", icon: "üìö" },
    { path: "/culture", label: "–ö—É–ª—å—Ç—É—Ä–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏", icon: "üé®" },
    { path: "/attractions", label: "–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", icon: "üèõÔ∏è" },
    { path: "/events", label: "–°–æ–±—ã—Ç–∏—è –∏ –º–∞—Ä—à—Ä—É—Ç—ã", icon: "üìÖ" },
    { path: "/contacts", label: "–ö–æ–Ω—Ç–∞–∫—Ç—ã", icon: "üìß" },
    { path: "/admin", label: "–ê–¥–º–∏–Ω", icon: "‚öôÔ∏è" }
  ];

  return (
    <nav className="bg-blue-900 shadow-lg sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between h-16">
          <div className="flex items-center">
            <Link to="/" className="flex items-center space-x-2">
              <div className="w-10 h-10 bg-yellow-400 rounded-full flex items-center justify-center">
                <span className="text-blue-900 font-bold text-xl">–ù–ù</span>
              </div>
              <span className="text-white font-bold text-xl">–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å</span>
            </Link>
          </div>

          {/* Desktop Menu */}
          <div className="hidden md:flex items-center space-x-4">
            {navItems.map((item) => (
              <Link
                key={item.path}
                to={item.path}
                className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                  location.pathname === item.path
                    ? 'bg-blue-700 text-yellow-300'
                    : 'text-white hover:bg-blue-700 hover:text-yellow-300'
                }`}
              >
                <span className="mr-1">{item.icon}</span>
                {item.label}
              </Link>
            ))}
          </div>

          {/* Mobile menu button */}
          <div className="md:hidden flex items-center">
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="text-white hover:text-yellow-300"
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} 
                      d={isMenuOpen ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h16M4 18h16"} />
              </svg>
            </button>
          </div>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="md:hidden">
            <div className="px-2 pt-2 pb-3 space-y-1">
              {navItems.map((item) => (
                <Link
                  key={item.path}
                  to={item.path}
                  className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${
                    location.pathname === item.path
                      ? 'bg-blue-700 text-yellow-300'
                      : 'text-white hover:bg-blue-700 hover:text-yellow-300'
                  }`}
                  onClick={() => setIsMenuOpen(false)}
                >
                  <span className="mr-2">{item.icon}</span>
                  {item.label}
                </Link>
              ))}
            </div>
          </div>
        )}
      </div>
    </nav>
  );
};

// Home Page
const HomePage = () => {
  const [places, setPlaces] = useState([]);
  const [selectedPlace, setSelectedPlace] = useState(null);

  useEffect(() => {
    fetchPlaces();
  }, []);

  const fetchPlaces = async () => {
    try {
      const response = await axios.get(`${API}/places`);
      setPlaces(response.data);
    } catch (error) {
      console.error('Error fetching places:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white">
      {/* Hero Section */}
      <div className="relative overflow-hidden bg-blue-900 text-white">
        <div className="absolute inset-0 bg-black opacity-50"></div>
        <div className="relative max-w-7xl mx-auto py-24 px-4 text-center">
          <h1 className="text-5xl font-bold mb-6 animate-fade-in">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫—É—é –æ–±–ª–∞—Å—Ç—å
          </h1>
          <p className="text-xl mb-8 max-w-3xl mx-auto animate-fade-in-delay">
            –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –±–æ–≥–∞—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é, —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –¥—É—Ö 
            –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞ –±–µ—Ä–µ–≥–∞—Ö –≤–µ–ª–∏–∫–æ–π –í–æ–ª–≥–∏.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link to="/attractions" 
                  className="bg-yellow-500 hover:bg-yellow-600 text-blue-900 px-8 py-3 rounded-lg font-semibold transition-colors">
              –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            </Link>
            <Link to="/history" 
                  className="border-2 border-white hover:bg-white hover:text-blue-900 px-8 py-3 rounded-lg font-semibold transition-colors">
              –£–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
            </Link>
          </div>
        </div>
      </div>

      {/* Interactive Map Section */}
      <div className="max-w-7xl mx-auto py-16 px-4">
        <h2 className="text-3xl font-bold text-center mb-8 text-blue-900">
          –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        </h2>
        <p className="text-center mb-8 text-gray-600 max-w-2xl mx-auto">
          –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã—Ö –º–µ—Å—Ç–∞—Ö –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
        </p>
        <InteractiveMap 
          places={places} 
          selectedPlace={selectedPlace} 
          onPlaceSelect={setSelectedPlace} 
        />
        
        {selectedPlace && (
          <div className="mt-8 p-6 bg-white rounded-lg shadow-lg">
            <h3 className="text-2xl font-bold mb-4 text-blue-900">{selectedPlace.name}</h3>
            <p className="text-gray-700 mb-4">{selectedPlace.description}</p>
            <span className="inline-block bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
              {selectedPlace.category}
            </span>
          </div>
        )}
      </div>

      {/* Features Section */}
      <div className="bg-gray-50 py-16">
        <div className="max-w-7xl mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12 text-blue-900">
            –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç –≤ –Ω–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ
          </h2>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="text-center p-6 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow">
              <div className="text-4xl mb-4">üè∞</div>
              <h3 className="text-xl font-semibold mb-3 text-blue-900">–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ</h3>
              <p className="text-gray-600">
                800 –ª–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –¥—Ä–µ–≤–Ω–∏–µ –∫—Ä–µ–ø–æ—Å—Ç–∏, —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –ø–∞–º—è—Ç–Ω–∏–∫–∏ –∫—É–ª—å—Ç—É—Ä—ã
              </p>
            </div>
            <div className="text-center p-6 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow">
              <div className="text-4xl mb-4">üé®</div>
              <h3 className="text-xl font-semibold mb-3 text-blue-900">–ù–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–æ–º—ã—Å–ª—ã</h3>
              <p className="text-gray-600">
                –ó–Ω–∞–º–µ–Ω–∏—Ç–∞—è —Ö–æ—Ö–ª–æ–º—Å–∫–∞—è —Ä–æ—Å–ø–∏—Å—å, –≥–æ—Ä–æ–¥–µ—Ü–∫–∏–µ —É–∑–æ—Ä—ã –∏ –¥—Ä—É–≥–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–º–µ—Å–ª–∞
              </p>
            </div>
            <div className="text-center p-6 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow">
              <div className="text-4xl mb-4">üåä</div>
              <h3 className="text-xl font-semibold mb-3 text-blue-900">–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –∫—Ä–∞—Å–æ—Ç—ã</h3>
              <p className="text-gray-600">
                –í–µ–ª–∏–∫–∞—è –í–æ–ª–≥–∞, –∂–∏–≤–æ–ø–∏—Å–Ω—ã–µ –ª–µ—Å–∞, –æ–∑–µ—Ä–∞ –∏ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ —ç–∫–æ—Ç—É—Ä–∏–∑–º–∞
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// History Page
const HistoryPage = () => {
  const [historyEvents, setHistoryEvents] = useState([]);

  useEffect(() => {
    fetchHistory();
  }, []);

  const fetchHistory = async () => {
    try {
      const response = await axios.get(`${API}/history`);
      setHistoryEvents(response.data);
    } catch (error) {
      console.error('Error fetching history:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <h1 className="text-4xl font-bold text-center mb-8 text-blue-900">–ò—Å—Ç–æ—Ä–∏—è –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏</h1>
        
        <div className="relative">
          <div className="absolute left-4 top-0 bottom-0 w-0.5 bg-blue-300"></div>
          
          {historyEvents.map((event, index) => (
            <div key={event.id} className="relative mb-8 ml-12">
              <div className="absolute -left-10 w-6 h-6 bg-blue-600 rounded-full border-4 border-white shadow"></div>
              <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow">
                <div className="flex items-center mb-3">
                  <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-semibold">
                    {event.year} –≥–æ–¥
                  </span>
                </div>
                <h3 className="text-xl font-bold mb-3 text-blue-900">{event.title}</h3>
                <p className="text-gray-700">{event.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Culture Page
const CulturePage = () => {
  const [cultureItems, setCultureItems] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('all');

  useEffect(() => {
    fetchCulture();
  }, []);

  const fetchCulture = async () => {
    try {
      const response = await axios.get(`${API}/culture`);
      setCultureItems(response.data);
    } catch (error) {
      console.error('Error fetching culture items:', error);
    }
  };

  const categories = [
    { value: 'all', label: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
    { value: 'craft', label: '–†–µ–º–µ—Å–ª–∞' },
    { value: 'cuisine', label: '–ö—É—Ö–Ω—è' },
    { value: 'costume', label: '–ö–æ—Å—Ç—é–º—ã' },
    { value: 'festival', label: '–§–µ—Å—Ç–∏–≤–∞–ª–∏' }
  ];

  const filteredItems = selectedCategory === 'all' 
    ? cultureItems 
    : cultureItems.filter(item => item.category === selectedCategory);

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        <h1 className="text-4xl font-bold text-center mb-8 text-blue-900">
          –ö—É–ª—å—Ç—É—Ä–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏
        </h1>
        
        {/* Category Filter */}
        <div className="flex flex-wrap justify-center gap-4 mb-8">
          {categories.map(category => (
            <button
              key={category.value}
              onClick={() => setSelectedCategory(category.value)}
              className={`px-4 py-2 rounded-full transition-colors ${
                selectedCategory === category.value
                  ? 'bg-blue-600 text-white'
                  : 'bg-white text-blue-600 hover:bg-blue-100'
              }`}
            >
              {category.label}
            </button>
          ))}
        </div>

        {/* Culture Items Grid */}
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredItems.map(item => (
            <div key={item.id} className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow">
              <div className="p-6">
                <div className="flex items-center mb-3">
                  <span className="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-sm">
                    {item.category}
                  </span>
                </div>
                <h3 className="text-xl font-bold mb-3 text-blue-900">{item.title}</h3>
                <p className="text-gray-700">{item.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Attractions Page
const AttractionsPage = () => {
  const [places, setPlaces] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('all');

  useEffect(() => {
    fetchPlaces();
  }, []);

  const fetchPlaces = async () => {
    try {
      const response = await axios.get(`${API}/places`);
      setPlaces(response.data);
    } catch (error) {
      console.error('Error fetching places:', error);
    }
  };

  const categories = [
    { value: 'all', label: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
    { value: 'kremlin', label: '–ö—Ä–µ–º–ª—å' },
    { value: 'museum', label: '–ú—É–∑–µ–∏' },
    { value: 'nature', label: '–ü—Ä–∏—Ä–æ–¥–∞' },
    { value: 'architecture', label: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞' }
  ];

  const filteredPlaces = selectedCategory === 'all' 
    ? places 
    : places.filter(place => place.category === selectedCategory);

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        <h1 className="text-4xl font-bold text-center mb-8 text-blue-900">
          –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        </h1>
        
        {/* Category Filter */}
        <div className="flex flex-wrap justify-center gap-4 mb-8">
          {categories.map(category => (
            <button
              key={category.value}
              onClick={() => setSelectedCategory(category.value)}
              className={`px-4 py-2 rounded-full transition-colors ${
                selectedCategory === category.value
                  ? 'bg-blue-600 text-white'
                  : 'bg-white text-blue-600 hover:bg-blue-100'
              }`}
            >
              {category.label}
            </button>
          ))}
        </div>

        {/* Places Grid */}
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredPlaces.map(place => (
            <div key={place.id} className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow">
              <div className="p-6">
                <div className="flex items-center mb-3">
                  <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                    {place.category}
                  </span>
                </div>
                <h3 className="text-xl font-bold mb-3 text-blue-900">{place.name}</h3>
                <p className="text-gray-700 mb-4">{place.description}</p>
                <div className="text-sm text-gray-500">
                  üìç {place.latitude.toFixed(4)}, {place.longitude.toFixed(4)}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// Events Page
const EventsPage = () => {
  const [events, setEvents] = useState([]);

  useEffect(() => {
    fetchEvents();
  }, []);

  const fetchEvents = async () => {
    try {
      const response = await axios.get(`${API}/events`);
      setEvents(response.data);
    } catch (error) {
      console.error('Error fetching events:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <h1 className="text-4xl font-bold text-center mb-8 text-blue-900">
          –°–æ–±—ã—Ç–∏—è –∏ –º–∞—Ä—à—Ä—É—Ç—ã
        </h1>
        
        <div className="grid gap-6">
          {events.map(event => (
            <div key={event.id} className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-6">
              <div className="flex flex-col md:flex-row md:items-center md:justify-between">
                <div className="flex-1">
                  <div className="flex items-center mb-2">
                    <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm mr-2">
                      {event.category}
                    </span>
                    <span className="text-gray-500 text-sm">
                      üìÖ {new Date(event.date).toLocaleDateString('ru-RU')}
                    </span>
                  </div>
                  <h3 className="text-xl font-bold mb-2 text-blue-900">{event.title}</h3>
                  <p className="text-gray-700 mb-2">{event.description}</p>
                  <div className="text-sm text-gray-500">
                    üìç {event.location}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {events.length === 0 && (
          <div className="text-center py-12">
            <p className="text-gray-500 text-lg">–°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
          </div>
        )}
      </div>
    </div>
  );
};

// Contact Page
const ContactPage = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState('');

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      await axios.post(`${API}/contact`, formData);
      setSubmitMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      setFormData({ name: '', email: '', message: '' });
    } catch (error) {
      setSubmitMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
    
    setIsSubmitting(false);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <h1 className="text-4xl font-bold text-center mb-8 text-blue-900">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h1>
        
        <div className="grid md:grid-cols-2 gap-8">
          {/* Contact Form */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold mb-4 text-blue-900">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</h2>
            <form onSubmit={handleSubmit}>
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  –ò–º—è *
                </label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500"
                />
              </div>
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  Email *
                </label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500"
                />
              </div>
              <div className="mb-6">
                <label className="block text-gray-700 text-sm font-bold mb-2">
                  –°–æ–æ–±—â–µ–Ω–∏–µ *
                </label>
                <textarea
                  name="message"
                  value={formData.message}
                  onChange={handleInputChange}
                  required
                  rows="4"
                  className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500"
                />
              </div>
              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors disabled:opacity-50"
              >
                {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'}
              </button>
            </form>
            
            {submitMessage && (
              <div className="mt-4 p-3 bg-green-100 text-green-700 rounded-lg">
                {submitMessage}
              </div>
            )}
          </div>

          {/* Contact Information */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold mb-4 text-blue-900">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–≤—è–∑–∏</h2>
            
            <div className="space-y-4">
              <div>
                <h3 className="font-semibold text-gray-800">–ê–¥—Ä–µ—Å:</h3>
                <p className="text-gray-600">
                  –≥. –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥<br />
                  –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å<br />
                  –†–æ—Å—Å–∏—è
                </p>
              </div>
              
              <div>
                <h3 className="font-semibold text-gray-800">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</h3>
                <p className="text-gray-600">
                  –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: 9:00 - 18:00<br />
                  –°—É–±–±–æ—Ç–∞ - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 10:00 - 16:00
                </p>
              </div>
              
              <div>
                <h3 className="font-semibold text-gray-800">–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã:</h3>
                <p className="text-gray-600">
                  –ú—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º —ç–∫—Å–∫—É—Ä—Å–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –º–µ—Å—Ç–∞–º,<br />
                  –∑–Ω–∞–∫–æ–º–∏–º —Å –Ω–∞—Ä–æ–¥–Ω—ã–º–∏ –ø—Ä–æ–º—ã—Å–ª–∞–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏ —Ä–µ–≥–∏–æ–Ω–∞.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Basic Admin Panel
const AdminPage = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [credentials, setCredentials] = useState({ username: '', password: '' });
  const [activeTab, setActiveTab] = useState('places');

  const handleLogin = (e) => {
    e.preventDefault();
    if (credentials.username === 'admin' && credentials.password === 'admin123') {
      setIsAuthenticated(true);
    } else {
      alert('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
  };

  const initializeData = async () => {
    try {
      const auth = btoa('admin:admin123');
      await axios.post(`${API}/init-data`, {}, {
        headers: { 'Authorization': `Basic ${auth}` }
      });
      alert('–î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('Error initializing data:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-md w-96">
          <h1 className="text-2xl font-bold mb-6 text-center text-blue-900">–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h1>
          <form onSubmit={handleLogin}>
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2">
                –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              </label>
              <input
                type="text"
                value={credentials.username}
                onChange={(e) => setCredentials({...credentials, username: e.target.value})}
                className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500"
                required
              />
            </div>
            <div className="mb-6">
              <label className="block text-gray-700 text-sm font-bold mb-2">
                –ü–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={credentials.password}
                onChange={(e) => setCredentials({...credentials, password: e.target.value})}
                className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-blue-500"
                required
              />
            </div>
            <button
              type="submit"
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg"
            >
              –í–æ–π—Ç–∏
            </button>
          </form>
          <p className="text-sm text-gray-600 text-center mt-4">
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin / admin123
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-4xl font-bold text-blue-900">–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h1>
          <button
            onClick={() => setIsAuthenticated(false)}
            className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg"
          >
            –í—ã–π—Ç–∏
          </button>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="mb-6">
            <button
              onClick={initializeData}
              className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg"
            >
              –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            </button>
            <p className="text-sm text-gray-600 mt-2">
              –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑—Ü—ã –º–µ—Å—Ç, –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            </p>
          </div>

          <div className="text-center text-gray-600">
            <p>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.</p>
            <p className="mt-2">–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–π—Ç–∞.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main App Component
function App() {
  useEffect(() => {
    // Load Leaflet CSS and JS
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
    document.head.appendChild(link);

    const script = document.createElement('script');
    script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
    document.head.appendChild(script);

    return () => {
      document.head.removeChild(link);
      document.head.removeChild(script);
    };
  }, []);

  return (
    <div className="App">
      <BrowserRouter>
        <Navigation />
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/history" element={<HistoryPage />} />
          <Route path="/culture" element={<CulturePage />} />
          <Route path="/attractions" element={<AttractionsPage />} />
          <Route path="/events" element={<EventsPage />} />
          <Route path="/contacts" element={<ContactPage />} />
          <Route path="/admin" element={<AdminPage />} />
        </Routes>
      </BrowserRouter>
    </div>
  );
}

export default App;